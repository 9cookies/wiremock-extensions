<project xmlns="http://maven.apache.org/POM/4.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ninecookies.wiremock.extensions</groupId>
    <artifactId>wiremock-extensions</artifactId>
    <version>0.4.1</version>
    <packaging>jar</packaging>

    <name>Wiremock Extensions</name>
    <description>Provides wiremock extensions for dynamic mocking of JSON responses.</description>

    <properties>
        <skipBuild>${skipAll}</skipBuild>
        <skipPush>${skipAll}</skipPush>
        <skipTests>${skipAll}</skipTests>
        <skipITs>${skipTests}</skipITs>
        <skipDownload>${skipBuild}</skipDownload>
        <skipAssembly>${skipBuild}</skipAssembly>

        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <project.build.resourceEncoding>UTF-8</project.build.resourceEncoding>

        <java.version>1.8</java.version>

        <wiremock.version>2.26.0</wiremock.version>
        <jsonpath.version>2.4.0</jsonpath.version>
        <jackson.version>2.10.5.1</jackson.version>
        <slf4j.version>1.7.30</slf4j.version>
        <log4j.version>2.13.0</log4j.version>
        <log4j2-logstash.version>1.0.1</log4j2-logstash.version>
        <httpclient.version>4.5.13</httpclient.version>

        <testng.version>6.14.3</testng.version>
        <assertj.version>3.8.0</assertj.version>
        <restassured.version>2.9.0</restassured.version>
        <docker.resources>${project.basedir}/src/main/resources/docker</docker.resources>
        <docker.test.resources>${project.basedir}/src/test/resources</docker.test.resources>
        
        <sns.port>1060</sns.port>
        <sqs.port>1061</sqs.port>
        <wiremock.port>1062</wiremock.port>
    </properties>

    <scm>
        <connection>scm:git:ssh://github.com/9cookies/wiremock-extensions.git</connection>
        <developerConnection>scm:git:ssh://github.com/9cookies/wiremock-extensions.git</developerConnection>
        <url>https://github.com/9cookies/wiremock-extensions</url>
    </scm>

    <distributionManagement>
        <repository>
            <id>local-releases</id>
            <name>Local Release Repository</name>
            <url>file://${project.build.directory}/mvn-repo/releases</url>
        </repository>
        <snapshotRepository>
            <id>local-snapshots</id>
            <name>Local Snapshot Repository</name>
            <url>file://${project.build.directory}/mvn-repo/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>com.fasterxml.jackson.core</groupId>
                <artifactId>jackson-databind</artifactId>
                <version>${jackson.version}</version>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!-- used to find replacements by their defined JSON paths from response -->
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>${jsonpath.version}</version>
        </dependency>
        <!-- used to simulate callback requests -->
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>${httpclient.version}</version>
        </dependency>
        <!-- used to send SQS messages -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>amazon-sqs-java-messaging-lib</artifactId>
            <version>1.0.8</version>
        </dependency>
        <!-- used to send SNS messages -->
        <dependency>
            <groupId>com.amazonaws</groupId>
            <artifactId>aws-java-sdk-sns</artifactId>
            <version>1.11.106</version>
        </dependency>
        <!-- logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-jcl</artifactId>
            <version>${log4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.vlkan.log4j2</groupId>
            <artifactId>log4j2-logstash-layout</artifactId>
            <version>${log4j2-logstash.version}</version>
        </dependency>

        <!-- provided dependencies -->
        <dependency>
            <groupId>com.github.tomakehurst</groupId>
            <artifactId>wiremock</artifactId>
            <version>${wiremock.version}</version>
            <scope>provided</scope>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>${testng.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${restassured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>json-path</artifactId>
            <version>${restassured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.jayway.restassured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>${restassured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.elasticmq</groupId>
            <artifactId>elasticmq-rest-sqs_2.12</artifactId>
            <version>1.1.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>ide/</exclude>
                    <exclude>docker/**</exclude>
                </excludes>
            </resource>
        </resources>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>1.4</version>
                <executions>
                    <execution>
                        <id>enforce-maven</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.2.5,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.2</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.12.4</version>
                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>test</phase>
                        <goals>
                            <goal>test</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>2.22.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <version>1.6.1</version>
                <executions>
                    <execution>
                        <id>wiremock-standalone</id>
                        <!-- during package we build the docker image thus 
                            we need the wiremock standalone jar -->
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <skip>${skipDownload}</skip>
                            <url>https://repo1.maven.org/maven2/com/github/tomakehurst/wiremock-standalone/${wiremock.version}/wiremock-standalone-${wiremock.version}.jar</url>
                            <outputDirectory>${project.build.directory}</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- assemble jar including dependencies -->
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <finalName>${project.artifactId}-${project.version}</finalName>
                </configuration>
                <executions>
                    <execution>
                        <id>assemble-jar-with-dependencies</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>0.28.0</version>
                <configuration>
                    <!-- uncomment the next line to debug the docker images
                    <showLogs>localstack,deliveryhero/rps-wiremock</showLogs>
                    -->
                    <!-- explicit definition required -->
                    <skipBuild>${skipBuild}</skipBuild>
                    <images>
                        <image>
                            <alias>localstack</alias>
                            <name>940776968316.dkr.ecr.eu-west-1.amazonaws.com/deliveryhero/rps-localstack</name>
                            <run>
                                <ports>
                                    <port>${sns.port}:4575</port>
                                    <port>${sqs.port}:4576</port>
                                    <port>8081:8080</port>
                                    <port>${wiremock.port}:9090</port>
                                </ports>
                                <wait>
                                    <tcp>
                                        <host>127.0.0.1</host>
                                        <ports>
                                            <port>4575</port>
                                            <port>4576</port>
                                            <port>8080</port>
                                            <port>9090</port>
                                        </ports>
                                    </tcp>
                                    <log>initialization finished successfully</log>
                                    <time>60000</time>
                                </wait>
                                <env>
                                    <SERVICES>sns,sqs</SERVICES>
                                </env>
                                <volumes>
                                    <bind>
                                        <volume>${docker.test.resources}/localstack/init.sh:/docker-entrypoint-initaws.d/init.sh</volume>
                                    </bind>
                                </volumes>
                            </run>
                        </image>
                        <image>
                            <registry>940776968316.dkr.ecr.eu-west-1.amazonaws.com</registry>
                            <name>deliveryhero/rps-wiremock</name>
                            <build>
                                <nocache>true</nocache>
                                <assembly>
                                    <targetDir>/</targetDir>
                                    <inline>
                                        <files>
                                            <file>
                                                <source>${project.build.directory}/${project.artifactId}-${project.version}-jar-with-dependencies.jar</source>
                                                <outputDirectory>var/wiremock/lib</outputDirectory>
                                                <destName>${project.artifactId}.jar</destName>
                                            </file>
                                            <file>
                                                <source>${project.build.directory}/wiremock-standalone-${wiremock.version}.jar</source>
                                                <outputDirectory>/var/wiremock/lib</outputDirectory>
                                                <destName>wiremock-standalone.jar</destName>
                                            </file>
                                            <file>
                                                <source>${docker.resources}/log4j2.xml</source>
                                                <outputDirectory>/var/wiremock/lib</outputDirectory>
                                                <destName>log4j2.xml</destName>
                                            </file>
                                            <file>
                                                <source>${docker.resources}/docker-entrypoint.sh</source>
                                            </file>
                                        </files>
                                    </inline>
                                </assembly>
                                <from>940776968316.dkr.ecr.eu-west-1.amazonaws.com/deliveryhero/rps-base-java:jdk-8.181</from>
                                <runCmds>
                                    <runCmd>apk add --update --no-cache openssl 'su-exec>=0.2' bash curl jq</runCmd>
                                    <runCmd>mkdir -p /var/wiremock/lib/</runCmd>
                                </runCmds>
                                <workdir>/home/wiremock</workdir>
                                <volumes>
                                    <volume>/home/wiremock</volume>
                                </volumes>
                                <ports>
                                    <port>8080</port>
                                    <port>8443</port>
                                    <port>7091</port>
                                </ports>
                                <entryPoint>["/docker-entrypoint.sh"]</entryPoint>
                                <cmd>["--disable-banner"]</cmd>
                                <tags>
                                    <tag>${wiremock.version}-${project.version}</tag>
                                </tags>
                            </build>
                            <run>
                                <env>
                                    <MAX_RETRIES>3</MAX_RETRIES>
                                    <RETRY_BACKOFF>500</RETRY_BACKOFF>
                                    <AWS_REGION>us-east-1</AWS_REGION>
                                    <AWS_ACCESS_KEY_ID>X</AWS_ACCESS_KEY_ID>
                                    <AWS_SECRET_ACCESS_KEY>X</AWS_SECRET_ACCESS_KEY>
                                    <AWS_SNS_ENDPOINT>http://localhost:4575</AWS_SNS_ENDPOINT>
                                    <AWS_SQS_ENDPOINT>http://localhost:4576</AWS_SQS_ENDPOINT>
                                    <CALLBACK_QUEUE>test-queue-name</CALLBACK_QUEUE>
                                    <CALLBACK_TOPIC_ARN>arn:aws:sns:us-east-1:000000000000:test-topic-name</CALLBACK_TOPIC_ARN>
                                    <PARTIAL_QUEUE_NAME>queue-name</PARTIAL_QUEUE_NAME>
                                </env>
                                <network>
                                    <mode>container</mode>
                                    <name>940776968316.dkr.ecr.eu-west-1.amazonaws.com/deliveryhero/rps-localstack</name>
                                </network>
                                <cmd>--disable-banner --port 9090</cmd>
                                <volumes>
                                    <bind>
                                        <volume>${docker.test.resources}/__files:/home/wiremock/__files</volume>
                                        <volume>${docker.test.resources}/mappings:/home/wiremock/mappings</volume>
                                    </bind>
                                </volumes>
                            </run>
                        </image>
                    </images>
                </configuration>
                <executions>
                    <!--
                        explicitly bind docker:build goal to package phase 
                        see https://dmp.fabric8.io/#build-assembly-descriptor
                    -->
                    <execution>
                        <id>docker-build</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>docker-push</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>start</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>start</goal>
                        </goals>
                        <configuration>
                            <skip>${skipITs}</skip>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>stop</goal>
                        </goals>
                        <configuration>
                            <skip>${skipITs}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.github.github</groupId>
                <artifactId>site-maven-plugin</artifactId>
                <version>0.12</version>
                <!-- this plug-in has issues with username / author / committer / whatever
                    property/name is null might be see https://github.com/github/maven-plugins/issues/85
                    final solution was to configure user name on github account profile. -->
                <configuration>
                    <repositoryOwner>9cookies</repositoryOwner>
                    <repositoryName>mvn-repo</repositoryName>
                    <server>github</server>
                    <branch>refs/heads/master</branch>
                    <outputDirectory>${project.build.directory}/mvn-repo</outputDirectory>
                    <merge>true</merge>
                    <message>Maven artifacts for
                        ${project.artifactId}.${project.version}</message>
                    <includes>
                        <include>**/*</include>
                    </includes>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>site</goal>
                        </goals>
                        <phase>deploy</phase>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
